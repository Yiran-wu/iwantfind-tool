/**
  * Created by wuyiran on 12/26/16.
  */
package com.iwantfind

import org.apache.hadoop.conf._
import org.apache.spark.{SparkConf, SparkContext}
import play.api.libs.json._

case class UserInfo (id: String, ids : Array[String], next_cursor : String, previous_cursor: String, total_number : String)

object WAnalyser {

//  implicit val jsonReads = Json.format[UsereInfo]
  // check
  def isValidate(line: String): Boolean = {
    line.split(' ').size >= 4
  }
  // return ip
  def parseIP (line :String):String = {
    val array = line.split(' ')
    if (array.isEmpty) {
      ""
    } else {
      array(0)
    }
  }

  def parseJSon(jsonStr : String) : UserInfo = {
    val json = Json.parse(jsonStr)
    UserInfo(json.\("id").toString(),
      json.\\("ids").map(_.toString()).toArray,
      json.\("next_cursor").toString(),
      json.\("previous_cursor").toString(),
      json.\("total_number").toString())
  }

  def process (path: String) = {

    // 1. 创建sparkcontext
    val sc = new SparkContext ( new SparkConf().setAppName("weibo test"))
    val fileSet = sc.textFile(path)

    val line =  "{\"id\":1220779200,\"ids\":[3912522941,1644489953,2120469947,2202387347,1661725184,2545618187,2108165354,1650469164,1779785750,3043459672\n,2726223703,2922505583,2126884617,1029374230,1577826897,1725503810,1495033135,1149665262,2462605080,2082306984,1991537851,1618051664,\n1781379945,1273656690,2096700197,2108200164,2648685691,2049424702,1926643245,2949366963,2940361290,2276886594,2092607397,1826854303,2\n309623245,1655665171,1291592332,2185391887,1639132981,1990153365,1686830902,1698075090,1828257241,1654716241,1773116334,1804480064,20\n03297057,2208727481,2055144181,1182389073,1725985197,1704103183,1197161814,1400220917,2485126903,1922397344,2418724427,2418077945,241\n8801567,2467604041,2417827827,2417852083,2272394945,1495437744,1671917891,2014215614,1039355545,1820177775,1880143303,1812591014,1300\n871220],\"next_cursor\":0,\"previous_cursor\":0,\"total_number\":71}"
    // 2. 统计关注别人最多的10个用户，并计算关注最多的人与最少的人相差多少
//    val vdata = fileSet.map( line => {
//
//    }).
//    vdata.foreach(println)
//
//    val vcount = vdata.count()
//
//    // 4. 统计Merge后的条数
//
//    // 5. 统计IP 个数
//    val ipcountRDD = vdata.map(xb => (parseIP(xb),1)).reduceByKey(_ + _)
//    val ipcount = ipcountRDD.count()
//
//    // 7. 统计访问最多的关键词 TOP 100
//    val top100 = ipcountRDD.take(100).mkString(";")
//val line =  "{\"id\":1220779200,\"ids\":[3912522941,1644489953,2120469947,2202387347,1661725184,2545618187,2108165354,1650469164,1779785750,3043459672\n,2726223703,2922505583,2126884617,1029374230,1577826897,1725503810,1495033135,1149665262,2462605080,2082306984,1991537851,1618051664,\n1781379945,1273656690,2096700197,2108200164,2648685691,2049424702,1926643245,2949366963,2940361290,2276886594,2092607397,1826854303,2\n309623245,1655665171,1291592332,2185391887,1639132981,1990153365,1686830902,1698075090,1828257241,1654716241,1773116334,1804480064,20\n03297057,2208727481,2055144181,1182389073,1725985197,1704103183,1197161814,1400220917,2485126903,1922397344,2418724427,2418077945,241\n8801567,2467604041,2417827827,2417852083,2272394945,1495437744,1671917891,2014215614,1039355545,1820177775,1880143303,1812591014,1300\n871220],\"next_cursor\":0,\"previous_cursor\":0,\"total_number\":71}"
    // 2. ?????????10??????????????????????
    //    val vdata = fileSet.map( line => {
    //
    //    }).
    //    vdata.foreach(println)
    //
    //    val vcount = vdata.count()
    //
    //    // 4. ??Merge????
    //
    //    // 5. ??IP ??
    //    val ipcountRDD = vdata.map(xb => (parseIP(xb),1)).reduceByKey(_ + _)
    //    val ipcount = ipcountRDD.count()
    //
    //    // 7. ?????????? TOP 100
    //    val top100 = ipcountRDD.take(100).mkString(";")




sc.stop()

  }

  def main(args: Array[String]) {
    val line =  "{\"id\":1220779200,\"ids\":[3912522941,1644489953,2120469947,2202387347,1661725184,2545618187,2108165354,1650469164,1779785750,3043459672\n,2726223703,2922505583,2126884617,1029374230,1577826897,1725503810,1495033135,1149665262,2462605080,2082306984,1991537851,1618051664,\n1781379945,1273656690,2096700197,2108200164,2648685691,2049424702,1926643245,2949366963,2940361290,2276886594,2092607397,1826854303,2\n309623245,1655665171,1291592332,2185391887,1639132981,1990153365,1686830902,1698075090,1828257241,1654716241,1773116334,1804480064,20\n03297057,2208727481,2055144181,1182389073,1725985197,1704103183,1197161814,1400220917,2485126903,1922397344,2418724427,2418077945,241\n8801567,2467604041,2417827827,2417852083,2272394945,1495437744,1671917891,2014215614,1039355545,1820177775,1880143303,1812591014,1300\n871220],\"next_cursor\":0,\"previous_cursor\":0,\"total_number\":71}"

    //val ret = process(args(0))
    //ret.foreach(println)
    val line2 = "{\n    \"id\": 1220779200,\n    \"ids\": [\n        3912522941,\n        1644489953,\n        2120469947,\n        2202387347,\n        1661725184,\n        2545618187,\n        2108165354,\n        1650469164,\n        1779785750,\n        3043459672,\n        2726223703,\n        2922505583,\n        2126884617,\n        1029374230,\n        1577826897,\n        1725503810,\n        1495033135,\n        1149665262,\n        2462605080,\n        2082306984,\n        1991537851,\n        1618051664,\n        1781379945,\n        1273656690,\n        2096700197,\n        2108200164,\n        2648685691,\n        2049424702,\n        1926643245,\n        2949366963,\n        2940361290,\n        2276886594,\n        2092607397,\n        1826854303,\n        2309623245,\n        1655665171,\n        1291592332,\n        2185391887,\n        1639132981,\n        1990153365,\n        1686830902,\n        1698075090,\n        1828257241,\n        1654716241,\n        1773116334,\n        1804480064,\n        2003297057,\n        2208727481,\n        2055144181,\n        1182389073,\n        1725985197,\n        1704103183,\n        1197161814,\n        1400220917,\n        2485126903,\n        1922397344,\n        2418724427,\n        2418077945,\n        2418801567,\n        2467604041,\n        2417827827,\n        2417852083,\n        2272394945,\n        1495437744,\n        1671917891,\n        2014215614,\n        1039355545,\n        1820177775,\n        1880143303,\n        1812591014,\n        1300871220\n    ],\n    \"next_cursor\": 0,\n    \"previous_cursor\": 0,\n    \"total_number\": 71\n}"
    val rdd = parseJSon(line2)
    print(rdd)

    rdd.ids.foreach(println)
  }

}